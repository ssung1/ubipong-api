buildscript {

    repositories {
        jcenter()
    }
    dependencies {
        classpath( "com.github.samueltbrown:gradle-cucumber-plugin:0.9" )
    }
}

apply plugin: 'java'

sourceSets {
    main.java.srcDirs 'src/main/java'
    test.java.srcDirs 'src/test/java','src/test/groovy'

    embeddedTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/embedded/java')
        }
        groovy {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/embedded/groovy')
        }
        resources.srcDir file('src/embedded/resources')
    }

    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration/java')
        }
        groovy {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration/groovy')
        }
        resources.srcDir file('src/integration/resources')
    }
}


configurations {
    embeddedTestCompile.extendsFrom testCompile
    embeddedTestRuntime.extendsFrom testRuntime

    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
}

task embeddedTest(type: Test) {
    testClassesDir = sourceSets.embeddedTest.output.classesDir
    classpath = sourceSets.embeddedTest.runtimeClasspath
    systemProperties System.getProperties()
    outputs.upToDateWhen { false }
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    systemProperties System.getProperties()
    outputs.upToDateWhen { false }
}


//cucumber() {
//    formats = [ 'pretty', 'html:build/reports/cucumber' ]
//    monochrome = false
//    strict = false
//    dryRun = false
//    ignoreFailures = false
//}


embeddedTest.mustRunAfter test


integrationTest.mustRunAfter test


tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}
